
TODO:
  - eslintrc: add react
  - install deps, npm outdated
  - copy baseline server from reader


EDITOR:
  - This is the initial step of the STEP 0 below
  - Indeed, just build something simple with Substance
  - Then work in some React+Ferruos
    - Authoring dashboard
    - Publishing frontend
  - This could be a good opportunity to test the async.auto based actions system


TODO:
  - start capturing the information that I would like this to store in a subdirectory

STEP 0:
  - do not get lost in the many generalising details, ship something first
  - 1. get Substance working with something like section+p+some inlines
  - 2. get that saving to Couch with title, date, project, published (bool)
  - 3. import blog into Couch with:
    - 3.1 content as HTML (a different type of object)
    - 3.2 attachments (not in Couch, just the metadata)
    - 3.3 stuff unpublished from within branch and limbo
  - 4. redo template (negative text?)
  - 5. redo CSS with cssnext and a few other small things like that
  - 6. lists for various queries
  - 7. deploy

STEP 1:
  - add support for notes on top
  - add search (with Elastic)
  - start with the properly kipple madness
  - CLI tool to push content (to share stuff easily)
  - stuff can be published but not indexed (not in search or lists) for early sharing


BASIC INFRASTRUCTURE:
  - Couch (init and base configuration)
  - Express
  - React with proper routing and base page send
  - sub-routers for all API access points

TYPES:
  - very simple ontological system
  - classes can be defined: name and bag of properties
  - properties can be defined: name, range, and arity
  - import type (typically from schema.org or a similar ontology)
  - generate GraphQL to go with
  - generic edit/view/list React component that are composed with Relay for type-specific components
  - DB collections: these are defined as objects in a specific collection, of a given type
    - they map to API endpoints

LOAD:
  - start with people, we need those for everything
  - then books/articles
  - find books/articles (to prefill) from various APIs (see undefined project)
  - notes on books -> that is where the editor starts

PROJECTS:
  - project have names, they point to data
  - so basically an article in the system can be published to a specific endpoints if it belongs to
    a given project (e.g. to a blog)

BERJON.COM:
  - redesign
  - import into articles
  - pre-render, can use React all the same

RESEARCH:
  - this is where this actually becomes serious
  - etiologi.es
